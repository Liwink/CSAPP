1
这个 Lab 太精彩了。
竟然是在 debug binary file，在这之前我连 binary 和 assembly 都没分清楚，C 都没写过几行！

2
objdump -d 反汇编太有用了。
反汇编出来的文件居然还会保留 C 语言中的函数名。
通过 C main 的内容，可以快速定位到黑盒代码。

3
bomb.c 给出了项目的结构信息（main）。

4
gdb 调试。
现加载 binary 文件。
通过 layout asm 看到反汇编。
打点，可以使用函数名，如 b phase_1，也可以通过内存地址，如 b 0x400ee9。这些信息都可以在 asm 中找到。
si 逐步调试。

5
rsi    0x402400
这 0x402400 是内存地址，不是字符串本身。
汇编中 mov 0x402400, %esi 是编译器将字符串存在内存中，地址为 0x402400。

为什么将字符串写入 0x402400 的逻辑没有出现在汇编中？

6
Little endian 小端序.

7
用 x 查看内存，可以直接输出 string，如 x/s 0x402400
x/x 以十六进制输出
x/d 以十进制输出
x/c 以单字符输出
x/i  反汇编 – 通常，我们会使用 x/10i $ip-20 来查看当前的汇编（$ip是指令寄存器）
x/s 以字符串输出

8
sscanf 处理字符串。
四个存储 args 的寄存器分别是：%rdi, %rsi, %rdx, %rcx
sscanf 返回的数组存储在堆栈中





